package test.cam;

import java.io.IOException;

import opengl.jni.Natives;
import opengl.scenes.GLThread;

import android.content.Context;
import android.hardware.Camera;
import android.opengl.GLSurfaceView;
import android.util.Log;
import android.view.SurfaceHolder;

public class CameraSurfaceGL extends GLSurfaceView implements
		SurfaceHolder.Callback {
	private static final String TAG = "GLPreview";

//	public Camera camera;
	private GLThread mGLThread;
	private SurfaceHolder mHolder;
	
	public CameraSurfaceGL(Context context) {
		super(context);
	}

	public void setRenderer(Renderer renderer) {
		mGLThread = new GLThread(renderer, getHolder()); // mHolder);
		mGLThread.start();

		Log.d(TAG, "GLSurfaceView::setRenderer setting natives listener");
		Natives.setListener(mGLThread);
	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
		// 4 = RGB_565
		Log.d(TAG, "surfaceChanged Surface fomat=" + format + " w=" + w + " h="
				+ h);

		// Now that the size is known, set up the camera parameters and begin
		// the preview.
		Camera.Parameters parameters = camera.getParameters();

		Log.d(TAG,
				"surfaceChanged Preview size: " + parameters.getPreviewSize());

		// (17)- YCbCr_420_SP (NV21)
		Log.d(TAG,
				"surfaceChanged Preview format: "
						+ parameters.getPreviewFormat());

		camera.startPreview();

		// mGLThread.onWindowResize(w, h);
	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		Log.d(TAG, "surfaceCreated");

		camera = Camera.open();
		// try {

		// camera.setPreviewDisplay(holder);

		camera.setPreviewCallback(new Camera.PreviewCallback() {

			public void onPreviewFrame(byte[] data, Camera cam) {
				// CameraSurface.this.invalidate();
				Log.d(TAG, "onPreviewFrame");
			}
		});
		// } catch (IOException e) {
		// e.printStackTrace();
		// }

		// mGLThread.surfaceCreated();
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
		// mGLThread.surfaceDestroyed();

		// Surface will be destroyed when we return, so stop the preview.
		// Because the CameraDevice object is not a shared resource, it's very
		// important to release it when the activity is paused.
		Log.d(TAG, "surfaceCreated Stop camera");

		camera.stopPreview();
		camera = null;

	}

	/**
	 * Inform the view that the activity is paused.
	 */
	public void onPause() {
		// mGLThread.onPause();
	}

	/**
	 * Inform the view that the activity is resumed.
	 */
	public void onResume() {
		// mGLThread.onResume();
	}

}
